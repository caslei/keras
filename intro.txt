keras
    |- .github
    |- docker
    |- docs
    |- examples
    |- keras
    |- keras-applications
    |- keras-contrib
    |- keras-preprocessing
    |- tests
    |- .coveragerc
    |- .gitignore
    |- .travis.yml
    |- CONTRIBUTING.md
    |- intro.txt
    |- ISSUE_TEMPLATE.md
    |- LICENSE
    |- MANIFEST.in
    |- PULL_REQUEST_TEMPLATE.md
    |- pytest.ini
    |- README.md
    |- setup.cfg
    |- setup.py


===========================================
.github
    |- ISSUE_TEMPLATE
        |- a--tensorflow-backend-users.md
        |- b--theano-backend-users.md
        |- c--cntk-backend-users.md
    |- stale.yml : YAML 是专门用来写配置文件的语言，非常简洁和强大，远比 JSON 格式方便。

===========================================
docker
    |- Dockerfile
    |- Makefile
    |- README.md
    |- theanorc

===========================================
docs
    |- templates
        |- getting-started
            |- faq.md
            |- functional-api-guide.md
            |- sequential-model-guide.md

        |- layers
            |- about-keras-layers.md
            |- writing-your-own-keras-layers.md

        |- models
            |- about-keras-models.md
            |- model.md
            |- sequential.md

        |- preprocessing
            |- image.md
            |- text.md

        |- activations.md
        |- applications.md
        |- backend.md
        |- callbacks.md
        |- constraints.md
        |- datasets.md
        |- index.md
        |- initializers.md
        |- losses.md
        |- metrics.md
        |- optimizers.md
        |- regularizers.md
        |- scikit-learn-api.md
        |- visualization.md
        |- why-use-keras.md

    |- __init__.py
    |- autogen.py
    |- mkdocs.yml
    |- README.md

===========================================
examples
    |- addition_rnn.py
    |- antirectifier.py
    |- babi_memnn.py
    |- babi_rnn.py
    |- cifar10_cnn.py
    |- cifar10_cnn_capsule.py
    |- cifar10_cnn_tfaugment2d.py
    |- cifar10_resnet.py
    |- conv_filter_visualization.py
    |- conv_lstm.py
    |- deep_dream.py
    |- image_ocr.py
    |- imdb_bidirectional_lstm.py
    |- imdb_cnn.py
    |- imdb_cnn_lstm.py
    |- imdb_fasttext.py
    |- imdb_lstm.py
    |- lstm_seq2seq.py
    |- lstm_seq2seq_restore.py
    |- lstm_stateful.py
    |- lstm_text_generation.py
    |- mnist_acgan.py
    |- mnist_cnn.py
    |- mnist_dataset_api.py
    |- mnist_denoising_autoencoder.py
    |- mnist_hierarchical_rnn.py
    |- mnist_irnn.py
    |- mnist_mlp.py
    |- mnist_net2net.py
    |- mnist_siamese.py
    |- mnist_sklearn_wrapper.py
    |- mnist_swwae.py
    |- mnist_tfrecord.py
    |- mnist_transfer_cnn.py
    |- neural_doodle.py
    |- neural_style_transfer.py
    |- pretrained_word_embeddings.py
    |- README.md
    |- reuters_mlp.py'
    |- reuters_mlp_relu_vs_selu.py
    |- tensorboard_embeddings_mnist.py
    |- variational_autoencoder.py
    |- variational_autoencoder_deconv.py

===========================================
keras
    |- applications
        |- densenet.py
        |- imagenet_utils.py
        |- inception_resnet_v2.py
        |- inception_v3.py
        |- mobilenet.py
        |- mobilenetv2.py
        |- mobilenet_v2.py
        |- nasnet.py
        |- resnet50.py
        |- vgg16.py
        |- vgg19.py
        |- xception.py
        |- __init__.py

    |- backend
        |- cntk_backend.py
        |- common.py
        |- tensorflow_backend.py
        |- theano_backend.py
        |- __init__.py

    |- datasets
        |- boston_housing.py
        |- cifar.py
        |- cifar10.py
        |- cifar100.py
        |- fashion_mnist.py
        |- imdb.py
        |- mnist.py
        |- reuters.py
        |- __init__.py

    |- engine
        |- base_layer.py
        |- input_layer.py
        |- network.py
        |- saving.py
        |- sequential.py
        |- topology.py
        |- training.py
        |- training_arrays.py
        |- training_generator.py
        |- training_utils.py
        |- __init__.py

    |- layers
        |- advanced_activations.py
        |- convolutional.py
        |- convolutional_recurrent.py
        |- core.py
        |- cudnn_recurrent.py
        |- embeddings.py
        |- local.py
        |- merge.py
        |- noise.py
        |- normalization.py
        |- pooling.py
        |- recurrent.py
        |- wrappers.py
        |- __init__.py

    |- legacy
        |- interfaces.py
        |- layers.py
        |- __init__.py

    |- preprocessing
        |- image.py
        |- sequence.py
        |- text.py
        |- __init__.py

    |- utils
        |- conv_utils.py
        |- data_utils.py
        |- generic_utils.py
        |- io_utils.py
        |- layer_utils.py
        |- multi_gpu_utils.py
        |- np_utils.py
        |- test_utils.py
        |- vis_utils.py
        |- __init__.py

    |- wrappers
        |- scikit_learn.py
        |- __init__.py    

    |- activations.py
    |- callbacks.py
    |- constraints.py
    |- initializers.py
    |- losses.py
    |- metrics.py
    |- models.py
    |- objectives.py
    |- optimizers.py
    |- regularizers.py
    |- __init__.py

===========================================
tests
    |- integration_tests
        |- preprocessing
            |- image_test.py
            |- sequence_test.py
            |- text_test.py            

        |- applications_test.py
        |- imagenet_utils_test.py
        |- test_datasets.py
        |- test_image_data_tasks.py
        |- test_temporal_data_tasks.py
        |- test_tensorflow_integration.py
        |- test_vector_data_tasks.py

    |- keras
        |- backend
            |- backend_test.py
            |- reference_operations.py

        |- engine
            |- test_topology.py
            |- test_training.py

        |- layers
            |- advanced_activations_test.py
            |- convolutional_recurrent_test.py
            |- convolutional_test.py
            |- core_test.py
            |- cudnn_recurrent_test.py
            |- embeddings_test.py
            |- local_test.py
            |- merge_test.py
            |- noise_test.py
            |- normalization_test.py
            |- pooling_test.py
            |- recurrent_test.py
            |- wrappers_test.py

        |- legacy
            |- interface_test.py
            |- layers_test.py

        |- utils
            |- conv_utils_test.py
            |- data_utils_test.py
            |- generic_utils_test.py
            |- io_utils_test.py
            |- layer_utils_test.py
            |- multi_gpu_test.py
            |- np_utils_test.py
            |- vis_utils_test.py

        |- wrappers
            |- scikit_learn_test.py

        |- activations_test.py
        |- constraints_test.py
        |- initializers_test.py
        |- losses_test.py
        |- metrics_test.py
        |- optimizers_test.py
        |- regularizers_test.py
        |- test_callbacks.py
        |- test_sequential_model.py

    |- conftest.py
    |- test_documentation.py
    |- test_doc_auto_generation.py
    |- test_dynamic_trainability.py
    |- test_loss_masking.py
    |- test_loss_weighting.py
    |- test_model_pickling.py
    |- test_model_saving.py
    |- test_multiprocessing.py






======================================================================
======================================================================
======================================================================




# YAML 语言教程
# http://www.ruanyifeng.com/blog/2016/07/yaml.html


# ===============================================
# 它的基本语法规则如下：
#         大小写敏感
#         使用缩进表示层级关系
#         缩进时不允许使用Tab键，只允许使用空格。
#         缩进的空格数目不重要，只要相同层级的元素左侧对齐即可
#         # 表示注释，从这个字符一直到行尾，都会被解析器忽略。

# ===============================================
# YAML 支持的数据结构有三种。
#         对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）
#         数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）
#         纯量（scalars）：单个的、不可再分的值
# ===============================================

# 对象的一组键值对，使用冒号结构表示。
#     animal: pets
# 也允许将所有键值对写成一个行内对象。
#     hash: { name: Steve, foo: bar } 

# ===============================================
# 一组连词线开头的行，构成一个数组。
#     - Cat
#     - Dog
#     - Goldfish

# 数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。
#     -
#      - Cat
#      - Dog
#      - Goldfish
# 数组也可以采用行内表示法。
#     animal: [Cat, Dog]

# ===============================================
# 对象和数组可以结合使用，形成复合结构。
#     languages:
#      - Ruby
#      - Perl
#      - Python 
#     websites:
#      YAML: yaml.org 
#      Ruby: ruby-lang.org 
#      Python: python.org 
#      Perl: use.perl.org 

# ===============================================
# 布尔值用true和false表示。
#     isSet: true

# ===============================================
# null用~表示。
#     parent: ~ 

# ===============================================
# 使用两个感叹号，强制转换数据类型。
#     e: !!str 123
#     f: !!str true

# ===============================================
# 字符串是最常见，也是最复杂的一种数据类型。
# 字符串默认不使用引号表示。
#     str: 这是一行字符串

# 如果字符串之中包含空格或特殊字符，需要放在引号之中。
#     str: '内容： 字符串'

# 单引号和双引号都可以使用，双引号不会对特殊字符转义。
#     s1: '内容\n字符串'
#     s2: "内容\n字符串"

# 单引号之中如果还有单引号，必须连续使用两个单引号转义。
#     str: 'labor''s day' 

# 字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格。
#     str: 这是一段
#       多行
#       字符串


# ===============================================
# 多行字符串可以使用|保留换行符，也可以使用>折叠换行。
#     this: |
#       Foo
#       Bar
#     that: >
#       Foo
#       Bar

# +表示保留文字块末尾的换行，-表示删除字符串末尾的换行。
#     s1: |
#       Foo
#     s2: |+
#       Foo
#     s3: |-
#       Foo

# 字符串之中可以插入 HTML 标记。
#     message: |
#       <p style="color: red">
#         段落
#       </p>

# 锚点&和别名*，可以用来引用。
#     defaults: &defaults
#       adapter:  postgres
#       host:     localhost

#     development:
#       database: myapp_development
#       <<: *defaults

#     test:
#       database: myapp_test
#       <<: *defaults

# &用来建立锚点（defaults），<<表示合并到当前数据，*用来引用锚点。
#     - &showell Steve 
#     - Clark 
#     - Brian 
#     - Oren 
#     - *showell 



setuptools:
    python包管理工具
    Python包管理工具setuptools详解
    http://yansu.org/2013/06/07/learn-python-setuptools-in-detail.html

from setuptools import setup, find_packages
description =''' 详细的描述工具包的功能与特色 '''
setup( name = "demo",
       version = "0.1",
       description = description，
       packages = find_packages(),
     )
